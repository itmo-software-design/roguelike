@startuml
package core {
    package vo {
        abstract class Entity {
            + position : Position
            + abstract symbol.get(): Char
        }

        ' Абстрактный класс для общих свойств персонажей
        abstract class Character extends Entity {
            + health : int
            + maxHealth : int
            - baseAttack : int
            + defense : int
            - baseDefense : int
            + fovRadius : Int
            + direction: MoveDirection
            + isAlive: Boolean
        }
        Character o-- Position
        Character o-- MoveDirection

        ' Класс игрока
        class Player extends Character {
            + name : String
            + inventory : Inventory
            + level: Int
            + currentPoints: Int
            + pointsToNextLevel: Int
            - experienceManager: ExperienceManager
            + addExperience()
        }
        Player *-- Inventory
        Player *-- ExperienceManager

        ' Класс Менеджера уровней
        class ExperienceManager {
            + currentLevel: int
            + currentPoints: int
            + pointsToNextLevel: int
            + healthBoost: int
            + attackBoost: int
            + defenceBoost: int
            + addExperience(points: int)
        }

        ' Класс инвентаря
        class Inventory {
            - items : List<Item>
            - equippedWeapon: Weapon?
            - equippedArmor: Armor?
            + addItem(item : Item)
            + removeItem(item : Item)
            + equipItem(item : Item)
            + unequipItem(item : Item)
            + getEquippedWeapon(): Weapon?
            + getEquippedArmor(): Weapon?
            + iterator(): Iterator<Item>
        }
        Inventory "1" o-- "many" Item

        ' Классы предметов
        class Item {
            + name : String
            + description : String
            + use()
        }

        interface Equippable {
            + equip()
        }

        class Weapon extends Item implements Equippable {
            + damage : int
        }

        class Armor extends Item implements Equippable {
            + defense : int
        }

        class Consumable extends Item {
            + effect : String
            + consume()
        }

        class Mob extends Character {
            + mobType: MobType
            + behaviour: Behaviour
            + position: Position
        }
        Mob *-- MobType
        Mob *-- Behaviour

        enum MobType {
            + mobName: String,
            + symbol: Char,
            + maxHealth: Int,
            + baseAttack: Int,
            + baseDefense: Int,
            + fovRadius: Int,
            + xp: Int
        }

       ' Класс уровня
        class DungeonLevel {
            + tiles: Array<Array<Tile>>
            + rooms: List<Room>
            + enemies: MutableList<Mob>
            + width: Int
            + height: Int
            + startPosition: Position
            + getTileAt(position: Position): Tile
            + isInBounds(position: Position): Boolean
        }
        DungeonLevel "1" *-- "many" Tile
        DungeonLevel "1" *-- "many" Room
        DungeonLevel "1" <-- "many" Room
        DungeonLevel <-- Position

       ' Класс тайла карты
        class Tile {
            + type: TileType
            + isExplored: Boolean
        }
        Tile o-- TileType

        enum TileType {
            + blocked: Boolean
            + blockSight: Boolean
        }

        class Room {
            + bottomLeft: Position
            + width: Int
            + height: Int
            + topRight: Position
            + center: Position
            + distanceFromZero: Position
            + intersects(other: Room): Boolean
            + isInside(position: Position): Boolean
        }
        Room o-- Position

        ' Класс для позиции на карте
        class Position {
            + x : Int
            + y : Int
            + distanceToZero: Int
            + neighbours: List<Position>
            + euclideanDistanceTo(other: Position): Int
            + manhattanDistanceTo(other: Position): Int
        }

        interface Renderable {}
    }

    package ui {
        package console {
            package game {
                class GameMapListener {
                    + onClosed: () -> Unit
                    + onInput(basePane: Window?, keyStroke: KeyStroke?, deliverEvent: AtomicBoolean?)
                    - sendMove(deliverEvent: AtomicBoolean?, direction: MoveDirection)
                    - isInteract(keyStroke: KeyStroke)
                    - isOpenInventory(keyStroke: KeyStroke)
                    - isMoveLeft(keyStroke: KeyStroke)
                    - isMoveDown(keyStroke: KeyStroke)
                    - isMoveRight(keyStroke: KeyStroke)
                    - isMoveUp(keyStroke: KeyStroke)
                }

                class GameMapPanelRenderer {
                    + drawComponent(graphics: TextGUIGraphics?, component: Panel?)
                    + getPreferredSize(component: Panel?): TerminalSize
                    - getScreenPosition(screenCenter: Position, levelPosition: Position, player: Player): Position
                    - checkScreenPositionIsInBounds(screenPosition: Position, graphics: TextGUIGraphics): Boolean
                    - renderPlayer(screenPosition: Position, graphics: TextGUIGraphics)
                    - renderMob(mobType: MobType, screenPosition: Position, graphics: TextGUIGraphics)
                    - renderExploredTile(tile: Tile, screenPosition: Position, graphics: TextGUIGraphics)
                    - renderTile(tile: Tile, screenPosition: Position, graphics: TextGUIGraphics)
                    - getTileRenderParams(tile: Tile): Triple<ANSI, ANSI, String>
                }
                GameMapPanelRenderer <-- GameSession
                GameMapPanelRenderer <-- CheckVisibilityAction
                GameMapPanelRenderer <-- MobManager
                GameMapPanelRenderer <-- RenderContext

                class GameMapScreen {
                    - gameMapListener: GameMapListener
                    - oldHints: Set<Window.Hint>
                    - init()
                }
            }

            class InventoryScreen {
                - closeButton: Button
                - containerPanel: Panel
                - window: BasicWindow
                - init()
                - buildItemMenu(inventory: Inventory, item: Item, menu: Menu)
                - updateMenuItem(menu: Menu)
                - onButtonClick()
            }
            InventoryScreen <-- Inventory

            class LootScreen {
                - closeButton: Button
                - init()
                - onButtonClick()
            }

            class MainMenuScreen {
                - playButton: Button
                - exitButton: Button
                - init()
                - onPlayButton()
                - onExitButton()
            }

            class PlayerNameScreen {
                - window: Window
                - onReturn: () -> Unit
                - playerTextBox: TextBox
                - nextButton: Button
                - returnButton: Button
                - init()
                - onNextButtonClick()
                - onReturnButtonClick()
            }

            object RenderContext {
                + screen: Screen
                + gui: MultiWindowTextGUI
                + val backgroundColor = TextColor.ANSI
            }
        }

        package localize {
            class LocalizationSource {
                - builtInLocalizations: Map<String, String>
                + getLocalization(code: String, vararg args: String): String
            }
        }
    }

    package messages {
        package player {
            enum MoveDirection {
            }

            class MovePlayer extends Message {
                - direction: MoveDirection
            }
            MovePlayer <-- MoveDirection

            class OpenInventory extends Message {}

            class PlayerInteract extends Message {}
        }

        package ui {
            class GameScreenExit extends Message {}

            class GameScreenOpened extends Message {}
        }

        interface Message {}

        object MessageBroker {
            - subscribers: ConcurrentHashMap<String, MutableSet<Subscriber>>
            + subscribe(topic: String, subscriber: Subscriber)
            + unsubscribe(topic: String, subscriber: Subscriber)
            + send(topic: String, message: Message)
        }

        interface Subscriber {
            + onMessage(message: Message)
        }
    }

    package engine {
        package action {
            interface Action<T,R> {
                perform(actor: Character, target: T, dungeonLevel: DungeonLevel): R
            }

            object AttackAction {
                - logger: KotlinLogging.logger
                + perform(actor: Character, target: Character, dungeonLevel: DungeonLevel)
            }
            AttackAction <|-- Action
            AttackAction <-- Character

            object CheckVisibilityAction {
                - logger: KotlinLogging.logger
                + perform(actor: Character, target: Position, dungeonLevel: DungeonLevel): Boolean
                - getLineOfSight(start: Position, end: Position): List<Position>
            }
            CheckVisibilityAction <|-- Action
            CheckVisibilityAction <-- Character
            CheckVisibilityAction <-- DungeonLevel
            CheckVisibilityAction <-- Position

            object MoveAction {
                - logger: KotlinLogging.logger
                + perform(actor: Character, target: Position, dungeonLevel: DungeonLevel): Boolean
                + perform(actor: Character, target: MoveDirection, dungeonLevel: DungeonLevel): Boolean
                - tryToMove(actor: Character, newPosition: Position, dungeonLevel: DungeonLevel): Boolean
                + isTileFreeAt(dungeonLevel: DungeonLevel, position: Position): Boolean
            }
            MoveAction <|-- Action
            MoveAction <-- Character
            MoveAction <-- DungeonLevel
            MoveAction <-- Position
            MoveAction <-- MobManager
        }

        package behaviour {
            interface Behaviour {
                + act(mob: Mob, dungeonLevel: DungeonLevel, player: Player)
            }
            Behaviour <-- Mob
            Behaviour <-- DungeonLevel
            Behaviour <-- Player

            abstract class BehaviourDecorator implements Behaviour {
                # parentBehaviour: Behaviour
            }

            class PassiveBehaviour extends Behaviour {}

            class isAliveBehaviour extends BehaviourDecorator {
                + act(mob: Mob, dungeonLevel: DungeonLevel, player: Player)
            }

            class BasicBehaviour extends BehaviourDecorator {
                - path: ArrayDeque<Position>
                + act(mob: Mob, dungeonLevel: DungeonLevel, player: Player)
                - rebuildPath(mob: Mob, dungeonLevel: DungeonLevel)
            }
            BasicBehaviour <-- MoveAction
            BasicBehaviour <-- AStarPathfinder

            object AStarPathfinder {
                + findPath(start: Position, end: Position, level: DungeonLevel): List<Position>
                - reconstructPath(node: AStarPathfinder.Node): List<Position>
            }

            class AggressiveBehaviour extends BehaviourDecorator {
                + act(mob: Mob, dungeonLevel: DungeonLevel, player: Player)
            }
            AggressiveBehaviour <-- CheckVisibilityAction
            AggressiveBehaviour <-- AttackAction
            AggressiveBehaviour <-- MoveAction

            class FearfulBehaviour extends BehaviourDecorator {
                + act(mob: Mob, dungeonLevel: DungeonLevel, player: Player)
            }
            FearfulBehaviour <-- CheckVisibilityAction
            FearfulBehaviour <-- MoveAction
        }

        package dungeon {
            class DungeonLevelRandomGenerator {
                - random: Random
                - roomCount: Int
                - tiles: Array<Array<Tile>>
                - initializeTiles(): Array<Array<Tile>>
                + generate(): DungeonLevel
                - placeItems(rooms: List<Room>)
                - placePortal(room: Room)
                - generateRandomRoom(): Room
                - carveRoom(room: Room)
                - generateRandomPosition(x1: Int, x2: Int, y1: Int, y2: Int): Position
                - connectRooms(rooms: List<Room>)
                - connectRooms(room1: Room, room2: Room)
                - carveHorizontalTunnelWithDoors(x1: Int, x2: Int, y: Int)
                - carveVerticalTunnelWithDoors(y1: Int, y2: Int, x: Int)
            }

            DungeonLevelRandomGenerator <-- DungeonLevel

            class DungeonLevelGenerator {
                + randomBuilder(): DungeonLevelGeneratorRandomBuilder
                + fileBuilder(): DungeonLevelGeneratorFileBuilder
            }

            class DungeonLevelBuilder {
                - tiles: Array<Array<Tile>>?
                - rooms: List<Room>?
                - mobFactory: MobFactory

                + tiles(tiles: Array<Array<Tile>>): DungeonLevelBuilder
                + rooms(rooms: List<Room>): DungeonLevelBuilder
                + mobFactory(mobFactory: MobFactory): DungeonLevelBuilder
                + build(): DungeonLevel
            }

            DungeonLevelBuilder <-- DungeonLevel
            DungeonLevelBuilder <-- MobFactory

            class DungeonLevelGeneratorRandomBuilder {
                - seed: Int
                - mobFactory: MobFactory
                - height: Int
                - width: Int
                - roomCount: Int
                - roomMinCount: Int?
                - roomMaxCount: Int?
                - roomMinSize: Int
                - roomMaxSize: Int

                + seed(value: Int): DungeonLevelGeneratorRandomBuilder
                + mobFactory(value: MobFactory): DungeonLevelGeneratorRandomBuilder
                + height(value: Int): DungeonLevelGeneratorRandomBuilder
                + width(value: Int): DungeonLevelGeneratorRandomBuilder
                + roomCount(value: Int): DungeonLevelGeneratorRandomBuilder
                + roomMinCount(value: Int?): DungeonLevelGeneratorRandomBuilder
                + roomMaxCount(value: Int?): DungeonLevelGeneratorRandomBuilder
                + roomMinSize(value: Int): DungeonLevelGeneratorRandomBuilder
                + roomMaxSize(value: Int): DungeonLevelGeneratorRandomBuilder
                + generate(): DungeonLevelBuilder
            }

            DungeonLevelGeneratorRandomBuilder <-- DungeonLevelBuilder
            DungeonLevelGeneratorRandomBuilder <-- MobFactory

            class DungeonLevelGeneratorFileBuilder {
                - mobFactory: MobFactory

                + mobFactory(value: MobFactory): DungeonLevelGeneratorFileBuilder
                + file(path: String): DungeonLevelBuilder
            }

            DungeonLevelGeneratorFileBuilder <-- MobFactory
            DungeonLevelGeneratorFileBuilder <-- DungeonLevelBuilder

            DungeonLevelGeneratorRandomBuilder <-- MobFactory
            DungeonLevelGenerator *-- DungeonLevelGeneratorRandomBuilder
            DungeonLevelGenerator *-- DungeonLevelGeneratorFileBuilder
            DungeonLevelGenerator *-- DungeonLevelBuilder
        }

        package factory {
            object MobManager {
                - mobCount: Int
                + canSpawnAt(dungeonLevel: DungeonLevel, position: Position): Boolean
                + spawn(position: Position): Mob
                - decideMobType(): MobType
                + getActiveMobs(dungeonLevel: DungeonLevel): List<Mob>
                + getMobAt(dungeonLevel: DungeonLevel, position: Position): Mob?
                + generateMobs(mobFactory: MobFactory, dungeonLevel: DungeonLevel)
            }
            MobManager *-- Mob
            MobManager <-- DungeonLevel
        }

        object GameSession {
            + player: Player
            + dungeonLevels: MutableList<DungeonLevel>
            + currentDungeonLevel: DungeonLevel
            - levelsCount: Int
            - currentLevelId: Int
            + isPlayerInitialized(): Boolean
            + startNewGame(playerName: String, firstLevel: DungeonLevel)
            + moveToNextLevel()
            + addMoreLevels()
            + loadStateFromFile(filePath: Path)
        }
        GameSession *-- Player
        GameSession <-- DungeonLevelGenerator
        GameSession "1" <-- "many" DungeonLevel
    }
}

package app {
    class App {
        + main()
    }
    App *-- GameLoop
    App <-- DungeonLevelGenerator
    App <-- GameSession
    App <-- MessageBroker
    App <-- GameScreenOpened
    App <-- MainMenuScreen
    App <-- RenderContext

    class GameLoop {
        - isRunning: Boolean
        - events: ConcurrentLinkedQueue<Message>
        - uiSubscriber: Subscriber
        - playerSubscriber: Subscriber
        - init()
        + start()
        - handleInput()
        - canGoTo(newPosition: Position): Boolean
        - tryInteract(position: Position, direction: MoveDirection)
        - tryInteractAt(position: Position)
        - updateGameState()
        - stop()
    }
    GameLoop *-- Subscriber
    GameLoop <-- MessageBroker
    GameLoop <-- GameSession
    GameLoop <-- MovePlayer
    GameLoop <-- OpenInventory
    GameLoop <-- PlayerInteract
    GameLoop <-- GameScreenExit
    GameLoop <-- InventoryScreen
    GameLoop <-- MobManager
    GameLoop <-- MoveAction
    GameLoop <-- AttackAction
}
@enduml
